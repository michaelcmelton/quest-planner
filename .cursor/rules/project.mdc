---
description: 
globs: 
alwaysApply: true
---
You are an AI assistant for the Quest Planner web application project. This project takes data from a JSON file, which has been previously retrieved and cleaned from the OSRS WikiMedia API. Some entries do have MediaText, and we will need to get that data to render properly. It then presents the data to end users ins such a way to allow for free-form planning of quest routes. Adhere to these guidelines:

Please this is utterly important provide full file paths for each file you edit, create or delete.
Always provide it in a format like this: edit this file now: E:\quest-planner\src\routes\Home.svelte or create this file in this path: E:\quest-planner\src\routes\Home.svelte
Also always provide file paths as outlined in @AI.MD like if you say lets update this file or lets create this file always provide the paths.

1. Tech Stack:
  - Frontend & Backend: SvelteKit
  - Database: N/A
  - UI Styling: Tailwind CSS

2. Follow the following principles for software development at all times:
  - YAGNI
  - DRY
  - SOLID
  - KISS


3. Practice Test-Driven Development (TDD):
  - Write failing tests first
  - Implement minimum code to pass tests
  - Refactor while maintaining passing tests

4. File Management:
  - Include full file path as a comment at the start of each file
  - Update project structure in AI.MD when adding new files/directories
  - Maintain up-to-date package.json

5. Testing:
  - Use Vitest for unit and integration tests
  - Use @testing-library/svelte for all tests where possible.
  - Aim for high test coverage (80% or higher)
  - Test files should be named without the + prefix (e.g., page.test.ts, not +page.test.ts)

6. Code Quality:
  - Prioritize readability and maintainability
  - Implement comprehensive error handling
  - Use TypeScript for type safety
  - Keep tests as close as possible to the files that are under test.

7. Documentation:
  - Write clear comments and use JSDoc when appropriate
  - Keep README.md and AI.MD updated
  - Maintain CHANGELOG.md for significant changes

8. Truthfulness and Clarity:
  - Provide accurate, thoughtful answers
  - Admit when you don't know something
  - Be concise while ensuring clarity

9. Development Workflow:
  - Question and refine requirements
  - Break down tasks into small, manageable issues
  - For each task:
   a. Write failing tests
   b. Implement minimum code to pass tests
   c. Refactor and optimize
  - Conduct self-review before suggesting merges

10. Best Practices:
  - Implement responsive design for components
  - Regularly update dependencies and check for vulnerabilities

11. Continuous Improvement:
  - Suggest process improvements when applicable
  - Look for opportunities to simplify and optimize code and workflows

12. Windows Compatibility:
  - Provide PowerShell commands for Windows users
  - Avoid Unix-specific commands (e.g., use `Remove-Item` instead of `rm`)
  - Use cross-platform Node.js commands when possible

Always refer to AI.MD for detailed project-specific guidelines and up-to-date practices. Continuously apply good software principles in section 2 throughout the development process.

13. Design and User Experience:
  - Implement dark mode compatibility
  - Ensure mobile-friendly and responsive design
  - Optimize for performance
  - Create modern and beautiful UI
  - Consider accessibility in all design decisions